// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package echopb is a generated protocol buffer package.

It is generated from these files:
	service.proto
	data.proto

It has these top-level messages:
	EchoMessage
	OpenstackNeutronNetRequestData
	OpenstackNeutronNetResponseData
	ConsoleResourceRequestData
	ConsoleResourceResponseData
	TraineeDroneRequestData
	TraineeDroneResponseData
	DefensiveDroneRequestData
	DefensiveDroneResponseData
*/
package echopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoMessage struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *EchoMessage) Reset()                    { *m = EchoMessage{} }
func (m *EchoMessage) String() string            { return proto.CompactTextString(m) }
func (*EchoMessage) ProtoMessage()               {}
func (*EchoMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EchoMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoMessage)(nil), "echopb.EchoMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EchoService service

type EchoServiceClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
	// admin (e.g. head referee) to create battlefield
	AdminSharedNetworkCreation(ctx context.Context, in *OpenstackNeutronNetRequestData, opts ...grpc.CallOption) (*OpenstackNeutronNetResponseData, error)
	// user (e.g. registered user) to establish combatroom
	ApplyConsoleIntoDnatWithNetworkAndMachine(ctx context.Context, in *ConsoleResourceRequestData, opts ...grpc.CallOption) (*ConsoleResourceResponseData, error)
	// user (e.g. registered user) to order targetdrone for training
	OrderTargetDroneIntoTrainee(ctx context.Context, in *TraineeDroneRequestData, opts ...grpc.CallOption) (*TraineeDroneResponseData, error)
	// user (e.g. registered user) to establish defensive drone into battlefield
	OrderTargetDroneIntoDefenseFortification(ctx context.Context, in *DefensiveDroneRequestData, opts ...grpc.CallOption) (*DefensiveDroneResponseData, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := grpc.Invoke(ctx, "/echopb.EchoService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) AdminSharedNetworkCreation(ctx context.Context, in *OpenstackNeutronNetRequestData, opts ...grpc.CallOption) (*OpenstackNeutronNetResponseData, error) {
	out := new(OpenstackNeutronNetResponseData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/AdminSharedNetworkCreation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) ApplyConsoleIntoDnatWithNetworkAndMachine(ctx context.Context, in *ConsoleResourceRequestData, opts ...grpc.CallOption) (*ConsoleResourceResponseData, error) {
	out := new(ConsoleResourceResponseData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/ApplyConsoleIntoDnatWithNetworkAndMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) OrderTargetDroneIntoTrainee(ctx context.Context, in *TraineeDroneRequestData, opts ...grpc.CallOption) (*TraineeDroneResponseData, error) {
	out := new(TraineeDroneResponseData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/OrderTargetDroneIntoTrainee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) OrderTargetDroneIntoDefenseFortification(ctx context.Context, in *DefensiveDroneRequestData, opts ...grpc.CallOption) (*DefensiveDroneResponseData, error) {
	out := new(DefensiveDroneResponseData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/OrderTargetDroneIntoDefenseFortification", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EchoService service

type EchoServiceServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	// admin (e.g. head referee) to create battlefield
	AdminSharedNetworkCreation(context.Context, *OpenstackNeutronNetRequestData) (*OpenstackNeutronNetResponseData, error)
	// user (e.g. registered user) to establish combatroom
	ApplyConsoleIntoDnatWithNetworkAndMachine(context.Context, *ConsoleResourceRequestData) (*ConsoleResourceResponseData, error)
	// user (e.g. registered user) to order targetdrone for training
	OrderTargetDroneIntoTrainee(context.Context, *TraineeDroneRequestData) (*TraineeDroneResponseData, error)
	// user (e.g. registered user) to establish defensive drone into battlefield
	OrderTargetDroneIntoDefenseFortification(context.Context, *DefensiveDroneRequestData) (*DefensiveDroneResponseData, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_AdminSharedNetworkCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenstackNeutronNetRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).AdminSharedNetworkCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/AdminSharedNetworkCreation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).AdminSharedNetworkCreation(ctx, req.(*OpenstackNeutronNetRequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_ApplyConsoleIntoDnatWithNetworkAndMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsoleResourceRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).ApplyConsoleIntoDnatWithNetworkAndMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/ApplyConsoleIntoDnatWithNetworkAndMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).ApplyConsoleIntoDnatWithNetworkAndMachine(ctx, req.(*ConsoleResourceRequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_OrderTargetDroneIntoTrainee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraineeDroneRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).OrderTargetDroneIntoTrainee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/OrderTargetDroneIntoTrainee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).OrderTargetDroneIntoTrainee(ctx, req.(*TraineeDroneRequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_OrderTargetDroneIntoDefenseFortification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefensiveDroneRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).OrderTargetDroneIntoDefenseFortification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/OrderTargetDroneIntoDefenseFortification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).OrderTargetDroneIntoDefenseFortification(ctx, req.(*DefensiveDroneRequestData))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echopb.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "AdminSharedNetworkCreation",
			Handler:    _EchoService_AdminSharedNetworkCreation_Handler,
		},
		{
			MethodName: "ApplyConsoleIntoDnatWithNetworkAndMachine",
			Handler:    _EchoService_ApplyConsoleIntoDnatWithNetworkAndMachine_Handler,
		},
		{
			MethodName: "OrderTargetDroneIntoTrainee",
			Handler:    _EchoService_OrderTargetDroneIntoTrainee_Handler,
		},
		{
			MethodName: "OrderTargetDroneIntoDefenseFortification",
			Handler:    _EchoService_OrderTargetDroneIntoDefenseFortification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd2, 0xcf, 0x6b, 0x14, 0x31,
	0x14, 0xc0, 0x71, 0x46, 0x6c, 0xd1, 0x48, 0x51, 0x66, 0x2b, 0x94, 0xa9, 0xd8, 0x9a, 0xa2, 0x56,
	0x0f, 0x3b, 0xa8, 0x37, 0x6f, 0x4b, 0xb7, 0x82, 0x87, 0x6e, 0x61, 0x5b, 0xf0, 0xfc, 0x36, 0xf3,
	0x76, 0x27, 0x74, 0x36, 0x2f, 0x26, 0x6f, 0x47, 0xbc, 0x7a, 0x11, 0x3c, 0xf9, 0xe3, 0x4f, 0xf3,
	0x5f, 0xf0, 0x0f, 0x91, 0x24, 0x3b, 0x32, 0xe0, 0xb6, 0xb7, 0x49, 0xf2, 0x25, 0xef, 0xc3, 0xcc,
	0x88, 0x1d, 0x8f, 0xae, 0xd5, 0x0a, 0x87, 0xd6, 0x11, 0x53, 0xbe, 0x8d, 0xaa, 0x26, 0x3b, 0x2b,
	0x1e, 0x2d, 0x88, 0x16, 0x0d, 0x96, 0x60, 0x75, 0x09, 0xc6, 0x10, 0x03, 0x6b, 0x32, 0x3e, 0x55,
	0x85, 0xa8, 0x80, 0x21, 0x3d, 0xcb, 0x23, 0x71, 0xef, 0x54, 0xd5, 0x74, 0x86, 0xde, 0xc3, 0x02,
	0xf3, 0x5d, 0xb1, 0xd5, 0x42, 0xb3, 0xc2, 0xbd, 0xec, 0x30, 0x3b, 0xbe, 0x3b, 0x4d, 0x8b, 0xd7,
	0x3f, 0xb7, 0x52, 0x75, 0x91, 0x86, 0xe5, 0xa7, 0xe2, 0x76, 0x58, 0xe6, 0x83, 0x61, 0x9a, 0x37,
	0xec, 0x5d, 0x51, 0x6c, 0xda, 0x94, 0x83, 0x2f, 0xbf, 0xff, 0xfc, 0xba, 0xb5, 0x23, 0xef, 0x94,
	0xed, 0xab, 0x32, 0x9c, 0xbf, 0xcd, 0x5e, 0xe6, 0xdf, 0x32, 0x51, 0x8c, 0xaa, 0xa5, 0x36, 0x17,
	0x35, 0x38, 0xac, 0x26, 0xc8, 0x9f, 0xc8, 0x5d, 0x9d, 0x38, 0x8c, 0xda, 0xfc, 0x59, 0x77, 0xd1,
	0xb9, 0x45, 0xe3, 0x19, 0xd4, 0xd5, 0x04, 0x57, 0xec, 0xc8, 0x4c, 0x90, 0xa7, 0xf8, 0x71, 0x85,
	0x9e, 0xc7, 0xc0, 0x50, 0x3c, 0xbf, 0xb1, 0xf3, 0x96, 0x8c, 0xc7, 0x10, 0xca, 0xfd, 0x88, 0x78,
	0x28, 0x1f, 0x04, 0xc4, 0x0c, 0x98, 0x1b, 0x9c, 0x6b, 0x6c, 0x2a, 0x1f, 0x30, 0xdf, 0x33, 0xf1,
	0x62, 0x64, 0x6d, 0xf3, 0xf9, 0x84, 0x8c, 0xa7, 0x06, 0xdf, 0x1b, 0xa6, 0xb1, 0x01, 0xfe, 0xa0,
	0xb9, 0x5e, 0xcb, 0x46, 0xa6, 0x3a, 0x03, 0x55, 0x6b, 0x83, 0xb9, 0xec, 0x66, 0xae, 0xeb, 0x29,
	0x7a, 0x5a, 0x39, 0x85, 0x7d, 0xd7, 0xd1, 0xb5, 0x4d, 0xcf, 0x54, 0x44, 0xd3, 0xae, 0xbc, 0x1f,
	0x4c, 0x8a, 0x96, 0x33, 0x60, 0x47, 0xb4, 0x8c, 0xa4, 0xaf, 0x99, 0xd8, 0x3f, 0x77, 0x15, 0xba,
	0x4b, 0x70, 0x0b, 0xe4, 0xb1, 0x23, 0x13, 0x59, 0x97, 0x0e, 0xb4, 0x41, 0xcc, 0x0f, 0xba, 0x01,
	0xeb, 0x8d, 0x18, 0xf4, 0x05, 0x87, 0x9b, 0x83, 0xde, 0xf8, 0xa7, 0x71, 0xfc, 0x81, 0x2c, 0xe2,
	0x2b, 0x21, 0x62, 0x05, 0x4b, 0x5b, 0x72, 0xca, 0xab, 0x90, 0x47, 0xc9, 0x8f, 0x4c, 0x1c, 0x6f,
	0x92, 0x8c, 0x71, 0x8e, 0xc6, 0xe3, 0x3b, 0x72, 0xac, 0xe7, 0x5a, 0xa5, 0xef, 0xf6, 0xa4, 0x9b,
	0x9a, 0x4e, 0x75, 0xfb, 0x3f, 0x4c, 0x5e, 0x97, 0xf4, 0x68, 0x8f, 0x23, 0x6d, 0x4f, 0x0e, 0x02,
	0xad, 0xea, 0xba, 0x7f, 0xa6, 0xd9, 0x76, 0xfc, 0x81, 0xdf, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x6d, 0xa9, 0x65, 0x3b, 0x03, 0x03, 0x00, 0x00,
}
