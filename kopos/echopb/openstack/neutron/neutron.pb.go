// Code generated by protoc-gen-go. DO NOT EDIT.
// source: openstack/neutron/neutron.proto

/*
Package echopb_openstack_neutron is a generated protocol buffer package.

It is generated from these files:
	openstack/neutron/neutron.proto

It has these top-level messages:
	NetworkExternal
	FloatingIP
	Router
	InterfaceInfo
	PortBinding
	NetworkExtAttrs
	SecGroup
	SecGroupRule
	Network
	Port
	Subnet
*/
package echopb_openstack_neutron

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NetworkExternal struct {
	Network  *Network `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	External bool     `protobuf:"varint,2,opt,name=external" json:"external,omitempty"`
}

func (m *NetworkExternal) Reset()                    { *m = NetworkExternal{} }
func (m *NetworkExternal) String() string            { return proto.CompactTextString(m) }
func (*NetworkExternal) ProtoMessage()               {}
func (*NetworkExternal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NetworkExternal) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *NetworkExternal) GetExternal() bool {
	if m != nil {
		return m.External
	}
	return false
}

type FloatingIP struct {
	Id                string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	FloatingNetworkId string `protobuf:"bytes,2,opt,name=floating_network_id,json=floatingNetworkId" json:"floating_network_id,omitempty"`
	FloatingIp        string `protobuf:"bytes,3,opt,name=floating_ip,json=floatingIp" json:"floating_ip,omitempty"`
	PortId            string `protobuf:"bytes,4,opt,name=port_id,json=portId" json:"port_id,omitempty"`
	FixedIp           string `protobuf:"bytes,5,opt,name=fixed_ip,json=fixedIp" json:"fixed_ip,omitempty"`
	TenantId          string `protobuf:"bytes,6,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	Status            string `protobuf:"bytes,7,opt,name=status" json:"status,omitempty"`
	RouterId          string `protobuf:"bytes,8,opt,name=router_id,json=routerId" json:"router_id,omitempty"`
}

func (m *FloatingIP) Reset()                    { *m = FloatingIP{} }
func (m *FloatingIP) String() string            { return proto.CompactTextString(m) }
func (*FloatingIP) ProtoMessage()               {}
func (*FloatingIP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FloatingIP) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FloatingIP) GetFloatingNetworkId() string {
	if m != nil {
		return m.FloatingNetworkId
	}
	return ""
}

func (m *FloatingIP) GetFloatingIp() string {
	if m != nil {
		return m.FloatingIp
	}
	return ""
}

func (m *FloatingIP) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *FloatingIP) GetFixedIp() string {
	if m != nil {
		return m.FixedIp
	}
	return ""
}

func (m *FloatingIP) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *FloatingIP) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *FloatingIP) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

type Router struct {
	Status       string              `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	GatewayInfo  *Router_GatewayInfo `protobuf:"bytes,2,opt,name=gateway_info,json=gatewayInfo" json:"gateway_info,omitempty"`
	AdminStateUp bool                `protobuf:"varint,3,opt,name=admin_state_up,json=adminStateUp" json:"admin_state_up,omitempty"`
	Distributed  bool                `protobuf:"varint,4,opt,name=distributed" json:"distributed,omitempty"`
	Name         string              `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Id           string              `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
	TenantId     string              `protobuf:"bytes,7,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	Routes       []*Router_Route     `protobuf:"bytes,8,rep,name=routes" json:"routes,omitempty"`
}

func (m *Router) Reset()                    { *m = Router{} }
func (m *Router) String() string            { return proto.CompactTextString(m) }
func (*Router) ProtoMessage()               {}
func (*Router) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Router) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Router) GetGatewayInfo() *Router_GatewayInfo {
	if m != nil {
		return m.GatewayInfo
	}
	return nil
}

func (m *Router) GetAdminStateUp() bool {
	if m != nil {
		return m.AdminStateUp
	}
	return false
}

func (m *Router) GetDistributed() bool {
	if m != nil {
		return m.Distributed
	}
	return false
}

func (m *Router) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Router) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Router) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *Router) GetRoutes() []*Router_Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type Router_GatewayInfo struct {
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId" json:"network_id,omitempty"`
}

func (m *Router_GatewayInfo) Reset()                    { *m = Router_GatewayInfo{} }
func (m *Router_GatewayInfo) String() string            { return proto.CompactTextString(m) }
func (*Router_GatewayInfo) ProtoMessage()               {}
func (*Router_GatewayInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *Router_GatewayInfo) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

type Router_Route struct {
	NextHop         string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	DestinationCidr string `protobuf:"bytes,2,opt,name=destination_cidr,json=destinationCidr" json:"destination_cidr,omitempty"`
}

func (m *Router_Route) Reset()                    { *m = Router_Route{} }
func (m *Router_Route) String() string            { return proto.CompactTextString(m) }
func (*Router_Route) ProtoMessage()               {}
func (*Router_Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *Router_Route) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *Router_Route) GetDestinationCidr() string {
	if m != nil {
		return m.DestinationCidr
	}
	return ""
}

type InterfaceInfo struct {
	SubnetId string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId" json:"subnet_id,omitempty"`
	PortId   string `protobuf:"bytes,2,opt,name=port_id,json=portId" json:"port_id,omitempty"`
	Id       string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	TenantId string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
}

func (m *InterfaceInfo) Reset()                    { *m = InterfaceInfo{} }
func (m *InterfaceInfo) String() string            { return proto.CompactTextString(m) }
func (*InterfaceInfo) ProtoMessage()               {}
func (*InterfaceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InterfaceInfo) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *InterfaceInfo) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *InterfaceInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InterfaceInfo) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

type PortBinding struct {
	Port       *Port                           `protobuf:"bytes,1,opt,name=port" json:"port,omitempty"`
	HostId     string                          `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	VifDetails map[string]*google_protobuf.Any `protobuf:"bytes,3,rep,name=vif_details,json=vifDetails" json:"vif_details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	VifType    string                          `protobuf:"bytes,4,opt,name=vif_type,json=vifType" json:"vif_type,omitempty"`
	VnicType   string                          `protobuf:"bytes,5,opt,name=vnic_type,json=vnicType" json:"vnic_type,omitempty"`
	Profile    map[string]string               `protobuf:"bytes,6,rep,name=profile" json:"profile,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PortBinding) Reset()                    { *m = PortBinding{} }
func (m *PortBinding) String() string            { return proto.CompactTextString(m) }
func (*PortBinding) ProtoMessage()               {}
func (*PortBinding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PortBinding) GetPort() *Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *PortBinding) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *PortBinding) GetVifDetails() map[string]*google_protobuf.Any {
	if m != nil {
		return m.VifDetails
	}
	return nil
}

func (m *PortBinding) GetVifType() string {
	if m != nil {
		return m.VifType
	}
	return ""
}

func (m *PortBinding) GetVnicType() string {
	if m != nil {
		return m.VnicType
	}
	return ""
}

func (m *PortBinding) GetProfile() map[string]string {
	if m != nil {
		return m.Profile
	}
	return nil
}

type NetworkExtAttrs struct {
	Id              string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name            string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AdminStateUp    bool                       `protobuf:"varint,3,opt,name=admin_state_up,json=adminStateUp" json:"admin_state_up,omitempty"`
	Status          string                     `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Subnets         []*Subnet                  `protobuf:"bytes,5,rep,name=subnets" json:"subnets,omitempty"`
	TenantId        string                     `protobuf:"bytes,6,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	Shared          bool                       `protobuf:"varint,7,opt,name=shared" json:"shared,omitempty"`
	NetworkType     string                     `protobuf:"bytes,8,opt,name=network_type,json=networkType" json:"network_type,omitempty"`
	PhysicalNetwork string                     `protobuf:"bytes,9,opt,name=physical_network,json=physicalNetwork" json:"physical_network,omitempty"`
	SegmentationId  string                     `protobuf:"bytes,10,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	Segments        []*NetworkExtAttrs_Segment `protobuf:"bytes,11,rep,name=segments" json:"segments,omitempty"`
}

func (m *NetworkExtAttrs) Reset()                    { *m = NetworkExtAttrs{} }
func (m *NetworkExtAttrs) String() string            { return proto.CompactTextString(m) }
func (*NetworkExtAttrs) ProtoMessage()               {}
func (*NetworkExtAttrs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NetworkExtAttrs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkExtAttrs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkExtAttrs) GetAdminStateUp() bool {
	if m != nil {
		return m.AdminStateUp
	}
	return false
}

func (m *NetworkExtAttrs) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NetworkExtAttrs) GetSubnets() []*Subnet {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *NetworkExtAttrs) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *NetworkExtAttrs) GetShared() bool {
	if m != nil {
		return m.Shared
	}
	return false
}

func (m *NetworkExtAttrs) GetNetworkType() string {
	if m != nil {
		return m.NetworkType
	}
	return ""
}

func (m *NetworkExtAttrs) GetPhysicalNetwork() string {
	if m != nil {
		return m.PhysicalNetwork
	}
	return ""
}

func (m *NetworkExtAttrs) GetSegmentationId() string {
	if m != nil {
		return m.SegmentationId
	}
	return ""
}

func (m *NetworkExtAttrs) GetSegments() []*NetworkExtAttrs_Segment {
	if m != nil {
		return m.Segments
	}
	return nil
}

type NetworkExtAttrs_Segment struct {
	PhysicalNetwork string `protobuf:"bytes,1,opt,name=physical_network,json=physicalNetwork" json:"physical_network,omitempty"`
	NetworkType     string `protobuf:"bytes,2,opt,name=network_type,json=networkType" json:"network_type,omitempty"`
	SegmentationId  string `protobuf:"bytes,3,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
}

func (m *NetworkExtAttrs_Segment) Reset()                    { *m = NetworkExtAttrs_Segment{} }
func (m *NetworkExtAttrs_Segment) String() string            { return proto.CompactTextString(m) }
func (*NetworkExtAttrs_Segment) ProtoMessage()               {}
func (*NetworkExtAttrs_Segment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *NetworkExtAttrs_Segment) GetPhysicalNetwork() string {
	if m != nil {
		return m.PhysicalNetwork
	}
	return ""
}

func (m *NetworkExtAttrs_Segment) GetNetworkType() string {
	if m != nil {
		return m.NetworkType
	}
	return ""
}

func (m *NetworkExtAttrs_Segment) GetSegmentationId() string {
	if m != nil {
		return m.SegmentationId
	}
	return ""
}

type SecGroup struct {
	Id          string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string          `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Rules       []*SecGroupRule `protobuf:"bytes,4,rep,name=rules" json:"rules,omitempty"`
	TenantId    string          `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
}

func (m *SecGroup) Reset()                    { *m = SecGroup{} }
func (m *SecGroup) String() string            { return proto.CompactTextString(m) }
func (*SecGroup) ProtoMessage()               {}
func (*SecGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SecGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SecGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SecGroup) GetRules() []*SecGroupRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *SecGroup) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

type SecGroupRule struct {
	Id             string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Direction      string `protobuf:"bytes,2,opt,name=direction" json:"direction,omitempty"`
	EtherType      string `protobuf:"bytes,3,opt,name=ether_type,json=etherType" json:"ether_type,omitempty"`
	SecGroupId     string `protobuf:"bytes,4,opt,name=sec_group_id,json=secGroupId" json:"sec_group_id,omitempty"`
	PortRangeMin   int32  `protobuf:"varint,5,opt,name=port_range_min,json=portRangeMin" json:"port_range_min,omitempty"`
	PortRangeMax   int32  `protobuf:"varint,6,opt,name=port_range_max,json=portRangeMax" json:"port_range_max,omitempty"`
	Protocol       string `protobuf:"bytes,7,opt,name=protocol" json:"protocol,omitempty"`
	RemoteGroupId  string `protobuf:"bytes,8,opt,name=remote_group_id,json=remoteGroupId" json:"remote_group_id,omitempty"`
	RemoteIpPrefix string `protobuf:"bytes,9,opt,name=remote_ip_prefix,json=remoteIpPrefix" json:"remote_ip_prefix,omitempty"`
	TenantId       string `protobuf:"bytes,10,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
}

func (m *SecGroupRule) Reset()                    { *m = SecGroupRule{} }
func (m *SecGroupRule) String() string            { return proto.CompactTextString(m) }
func (*SecGroupRule) ProtoMessage()               {}
func (*SecGroupRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SecGroupRule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SecGroupRule) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *SecGroupRule) GetEtherType() string {
	if m != nil {
		return m.EtherType
	}
	return ""
}

func (m *SecGroupRule) GetSecGroupId() string {
	if m != nil {
		return m.SecGroupId
	}
	return ""
}

func (m *SecGroupRule) GetPortRangeMin() int32 {
	if m != nil {
		return m.PortRangeMin
	}
	return 0
}

func (m *SecGroupRule) GetPortRangeMax() int32 {
	if m != nil {
		return m.PortRangeMax
	}
	return 0
}

func (m *SecGroupRule) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *SecGroupRule) GetRemoteGroupId() string {
	if m != nil {
		return m.RemoteGroupId
	}
	return ""
}

func (m *SecGroupRule) GetRemoteIpPrefix() string {
	if m != nil {
		return m.RemoteIpPrefix
	}
	return ""
}

func (m *SecGroupRule) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

type Network struct {
	Id           string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name         string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AdminStateUp bool      `protobuf:"varint,3,opt,name=admin_state_up,json=adminStateUp" json:"admin_state_up,omitempty"`
	Status       string    `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Subnets      []*Subnet `protobuf:"bytes,5,rep,name=subnets" json:"subnets,omitempty"`
	TenantId     string    `protobuf:"bytes,6,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	Shared       bool      `protobuf:"varint,7,opt,name=shared" json:"shared,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Network) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Network) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Network) GetAdminStateUp() bool {
	if m != nil {
		return m.AdminStateUp
	}
	return false
}

func (m *Network) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Network) GetSubnets() []*Subnet {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *Network) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *Network) GetShared() bool {
	if m != nil {
		return m.Shared
	}
	return false
}

type Port struct {
	Id                  string              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	NetworkId           string              `protobuf:"bytes,2,opt,name=network_id,json=networkId" json:"network_id,omitempty"`
	Name                string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	AdminStateUp        bool                `protobuf:"varint,4,opt,name=admin_state_up,json=adminStateUp" json:"admin_state_up,omitempty"`
	Status              string              `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	MacAddress          string              `protobuf:"bytes,6,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	FixedIps            []*Port_IP          `protobuf:"bytes,7,rep,name=fixed_ips,json=fixedIps" json:"fixed_ips,omitempty"`
	TenantId            string              `protobuf:"bytes,8,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	DeviceOwner         string              `protobuf:"bytes,9,opt,name=device_owner,json=deviceOwner" json:"device_owner,omitempty"`
	SecurityGroups      []string            `protobuf:"bytes,10,rep,name=security_groups,json=securityGroups" json:"security_groups,omitempty"`
	DeviceId            string              `protobuf:"bytes,11,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	AllowedAddressPairs []*Port_AddressPair `protobuf:"bytes,12,rep,name=allowed_address_pairs,json=allowedAddressPairs" json:"allowed_address_pairs,omitempty"`
}

func (m *Port) Reset()                    { *m = Port{} }
func (m *Port) String() string            { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()               {}
func (*Port) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Port) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Port) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Port) GetAdminStateUp() bool {
	if m != nil {
		return m.AdminStateUp
	}
	return false
}

func (m *Port) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Port) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Port) GetFixedIps() []*Port_IP {
	if m != nil {
		return m.FixedIps
	}
	return nil
}

func (m *Port) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *Port) GetDeviceOwner() string {
	if m != nil {
		return m.DeviceOwner
	}
	return ""
}

func (m *Port) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *Port) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *Port) GetAllowedAddressPairs() []*Port_AddressPair {
	if m != nil {
		return m.AllowedAddressPairs
	}
	return nil
}

type Port_IP struct {
	SubnetId  string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId" json:"subnet_id,omitempty"`
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
}

func (m *Port_IP) Reset()                    { *m = Port_IP{} }
func (m *Port_IP) String() string            { return proto.CompactTextString(m) }
func (*Port_IP) ProtoMessage()               {}
func (*Port_IP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *Port_IP) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *Port_IP) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

type Port_AddressPair struct {
	IpAddress  string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (m *Port_AddressPair) Reset()                    { *m = Port_AddressPair{} }
func (m *Port_AddressPair) String() string            { return proto.CompactTextString(m) }
func (*Port_AddressPair) ProtoMessage()               {}
func (*Port_AddressPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 1} }

func (m *Port_AddressPair) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *Port_AddressPair) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

type Subnet struct {
	Id              string                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	NetworkId       string                   `protobuf:"bytes,2,opt,name=network_id,json=networkId" json:"network_id,omitempty"`
	Name            string                   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Ipversion       int32                    `protobuf:"varint,4,opt,name=ipversion" json:"ipversion,omitempty"`
	Cidr            string                   `protobuf:"bytes,5,opt,name=cidr" json:"cidr,omitempty"`
	GatewayIp       string                   `protobuf:"bytes,6,opt,name=gateway_ip,json=gatewayIp" json:"gateway_ip,omitempty"`
	DnsNameServers  []string                 `protobuf:"bytes,7,rep,name=dns_name_servers,json=dnsNameServers" json:"dns_name_servers,omitempty"`
	AllocationPools []*Subnet_AllocationPool `protobuf:"bytes,8,rep,name=allocation_pools,json=allocationPools" json:"allocation_pools,omitempty"`
	HostRoutes      []*Subnet_HostRoute      `protobuf:"bytes,9,rep,name=host_routes,json=hostRoutes" json:"host_routes,omitempty"`
	Enabledhcp      bool                     `protobuf:"varint,10,opt,name=enabledhcp" json:"enabledhcp,omitempty"`
	TenantId        string                   `protobuf:"bytes,11,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
}

func (m *Subnet) Reset()                    { *m = Subnet{} }
func (m *Subnet) String() string            { return proto.CompactTextString(m) }
func (*Subnet) ProtoMessage()               {}
func (*Subnet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Subnet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Subnet) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *Subnet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subnet) GetIpversion() int32 {
	if m != nil {
		return m.Ipversion
	}
	return 0
}

func (m *Subnet) GetCidr() string {
	if m != nil {
		return m.Cidr
	}
	return ""
}

func (m *Subnet) GetGatewayIp() string {
	if m != nil {
		return m.GatewayIp
	}
	return ""
}

func (m *Subnet) GetDnsNameServers() []string {
	if m != nil {
		return m.DnsNameServers
	}
	return nil
}

func (m *Subnet) GetAllocationPools() []*Subnet_AllocationPool {
	if m != nil {
		return m.AllocationPools
	}
	return nil
}

func (m *Subnet) GetHostRoutes() []*Subnet_HostRoute {
	if m != nil {
		return m.HostRoutes
	}
	return nil
}

func (m *Subnet) GetEnabledhcp() bool {
	if m != nil {
		return m.Enabledhcp
	}
	return false
}

func (m *Subnet) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

type Subnet_HostRoute struct {
	DestinationCidr string `protobuf:"bytes,1,opt,name=destination_cidr,json=destinationCidr" json:"destination_cidr,omitempty"`
	NextHop         string `protobuf:"bytes,2,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
}

func (m *Subnet_HostRoute) Reset()                    { *m = Subnet_HostRoute{} }
func (m *Subnet_HostRoute) String() string            { return proto.CompactTextString(m) }
func (*Subnet_HostRoute) ProtoMessage()               {}
func (*Subnet_HostRoute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *Subnet_HostRoute) GetDestinationCidr() string {
	if m != nil {
		return m.DestinationCidr
	}
	return ""
}

func (m *Subnet_HostRoute) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

type Subnet_AllocationPool struct {
	Start string `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *Subnet_AllocationPool) Reset()                    { *m = Subnet_AllocationPool{} }
func (m *Subnet_AllocationPool) String() string            { return proto.CompactTextString(m) }
func (*Subnet_AllocationPool) ProtoMessage()               {}
func (*Subnet_AllocationPool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 1} }

func (m *Subnet_AllocationPool) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *Subnet_AllocationPool) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func init() {
	proto.RegisterType((*NetworkExternal)(nil), "echopb.openstack.neutron.NetworkExternal")
	proto.RegisterType((*FloatingIP)(nil), "echopb.openstack.neutron.FloatingIP")
	proto.RegisterType((*Router)(nil), "echopb.openstack.neutron.Router")
	proto.RegisterType((*Router_GatewayInfo)(nil), "echopb.openstack.neutron.Router.GatewayInfo")
	proto.RegisterType((*Router_Route)(nil), "echopb.openstack.neutron.Router.Route")
	proto.RegisterType((*InterfaceInfo)(nil), "echopb.openstack.neutron.InterfaceInfo")
	proto.RegisterType((*PortBinding)(nil), "echopb.openstack.neutron.PortBinding")
	proto.RegisterType((*NetworkExtAttrs)(nil), "echopb.openstack.neutron.NetworkExtAttrs")
	proto.RegisterType((*NetworkExtAttrs_Segment)(nil), "echopb.openstack.neutron.NetworkExtAttrs.Segment")
	proto.RegisterType((*SecGroup)(nil), "echopb.openstack.neutron.SecGroup")
	proto.RegisterType((*SecGroupRule)(nil), "echopb.openstack.neutron.SecGroupRule")
	proto.RegisterType((*Network)(nil), "echopb.openstack.neutron.Network")
	proto.RegisterType((*Port)(nil), "echopb.openstack.neutron.Port")
	proto.RegisterType((*Port_IP)(nil), "echopb.openstack.neutron.Port.IP")
	proto.RegisterType((*Port_AddressPair)(nil), "echopb.openstack.neutron.Port.AddressPair")
	proto.RegisterType((*Subnet)(nil), "echopb.openstack.neutron.Subnet")
	proto.RegisterType((*Subnet_HostRoute)(nil), "echopb.openstack.neutron.Subnet.HostRoute")
	proto.RegisterType((*Subnet_AllocationPool)(nil), "echopb.openstack.neutron.Subnet.AllocationPool")
}

func init() { proto.RegisterFile("openstack/neutron/neutron.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xcd, 0x6e, 0x1b, 0xb7,
	0x16, 0x86, 0xfe, 0x67, 0xce, 0x28, 0xb6, 0x2f, 0x93, 0x7b, 0xaf, 0xa2, 0xfc, 0x39, 0xc2, 0x45,
	0xae, 0x13, 0x04, 0x32, 0xea, 0xa2, 0x40, 0x90, 0x16, 0x41, 0xdd, 0x36, 0x4d, 0x06, 0xad, 0x13,
	0x75, 0xdc, 0x66, 0xd1, 0x45, 0x07, 0xe3, 0x21, 0x25, 0xb1, 0x19, 0x91, 0x03, 0x92, 0xb2, 0xad,
	0x5d, 0xdf, 0xa7, 0xe8, 0xba, 0xe8, 0x23, 0x74, 0xdf, 0x65, 0x81, 0x3e, 0x44, 0x5f, 0xa0, 0xe0,
	0xcf, 0xc8, 0x33, 0xb2, 0x6c, 0x67, 0xd1, 0x55, 0x57, 0x12, 0x3f, 0x9e, 0x73, 0x78, 0xce, 0xc7,
	0xc3, 0x6f, 0x0e, 0xdc, 0xe3, 0x39, 0x61, 0x52, 0x25, 0xe9, 0xdb, 0x5d, 0x46, 0xe6, 0x4a, 0x70,
	0x56, 0xfc, 0x0e, 0x73, 0xc1, 0x15, 0x47, 0x3d, 0x92, 0x4e, 0x79, 0x7e, 0x34, 0x5c, 0xda, 0x0d,
	0xdd, 0x7e, 0xff, 0xe6, 0x84, 0xf3, 0x49, 0x46, 0x76, 0x8d, 0xdd, 0xd1, 0x7c, 0xbc, 0x9b, 0xb0,
	0x85, 0x75, 0x1a, 0x7c, 0x0f, 0x9b, 0xaf, 0x88, 0x3a, 0xe1, 0xe2, 0xed, 0xf3, 0x53, 0x45, 0x04,
	0x4b, 0x32, 0xf4, 0x21, 0x74, 0x98, 0x85, 0x7a, 0xb5, 0xed, 0xda, 0x4e, 0xb0, 0x77, 0x7f, 0x78,
	0x51, 0xe4, 0xa1, 0xf3, 0x8d, 0x0a, 0x0f, 0xd4, 0x07, 0x8f, 0xb8, 0x40, 0xbd, 0xfa, 0x76, 0x6d,
	0xc7, 0x8b, 0x96, 0xeb, 0xc1, 0x9f, 0x35, 0x80, 0xcf, 0x33, 0x9e, 0x28, 0xca, 0x26, 0xe1, 0x08,
	0x6d, 0x40, 0x9d, 0x62, 0x73, 0x84, 0x1f, 0xd5, 0x29, 0x46, 0x43, 0xb8, 0x3e, 0x76, 0xbb, 0xb1,
	0x0b, 0x17, 0x53, 0x6c, 0xa2, 0xf8, 0xd1, 0xbf, 0x8a, 0x2d, 0x77, 0x62, 0x88, 0xd1, 0x3d, 0x08,
	0x96, 0xf6, 0x34, 0xef, 0x35, 0x8c, 0x1d, 0x14, 0x50, 0x98, 0xa3, 0xff, 0x42, 0x27, 0xe7, 0x42,
	0xe9, 0x20, 0x4d, 0xb3, 0xd9, 0xd6, 0xcb, 0x10, 0xa3, 0x9b, 0xe0, 0x8d, 0xe9, 0x29, 0xc1, 0xda,
	0xad, 0x65, 0x76, 0x3a, 0x66, 0x1d, 0xe6, 0xe8, 0x16, 0xf8, 0x8a, 0xb0, 0x84, 0x19, 0xaf, 0xb6,
	0xd9, 0xf3, 0x2c, 0x10, 0x62, 0xf4, 0x1f, 0x68, 0x4b, 0x95, 0xa8, 0xb9, 0xec, 0x75, 0x6c, 0x3c,
	0xbb, 0xd2, 0x4e, 0x82, 0xcf, 0x15, 0x11, 0xda, 0xc9, 0xb3, 0x4e, 0x16, 0x08, 0xf1, 0xe0, 0xe7,
	0x06, 0xb4, 0x23, 0xb3, 0x28, 0xf9, 0xd7, 0x2a, 0xfe, 0xaf, 0xa1, 0x3b, 0x49, 0x14, 0x39, 0x49,
	0x16, 0x31, 0x65, 0x63, 0x6e, 0x4a, 0x0e, 0xf6, 0x1e, 0x5f, 0x4c, 0xbb, 0x8d, 0x37, 0x7c, 0x61,
	0x9d, 0x42, 0x36, 0xe6, 0x51, 0x30, 0x39, 0x5b, 0xa0, 0xff, 0xc1, 0x46, 0x82, 0x67, 0x94, 0xc5,
	0xfa, 0x00, 0x12, 0xcf, 0x2d, 0x3b, 0x5e, 0xd4, 0x35, 0xe8, 0xa1, 0x06, 0xbf, 0xc9, 0xd1, 0x36,
	0x04, 0x98, 0x4a, 0x25, 0xe8, 0xd1, 0x5c, 0x11, 0xcb, 0x91, 0x17, 0x95, 0x21, 0x84, 0xa0, 0xc9,
	0x92, 0x19, 0x71, 0x24, 0x99, 0xff, 0xee, 0xda, 0xda, 0xcb, 0x6b, 0xab, 0x30, 0xd6, 0x59, 0x61,
	0xec, 0x19, 0xb4, 0x0d, 0x11, 0xb2, 0xe7, 0x6d, 0x37, 0x76, 0x82, 0xbd, 0x07, 0x57, 0xd6, 0x64,
	0x7e, 0x22, 0xe7, 0xd5, 0x7f, 0x0c, 0x41, 0xa9, 0x48, 0x74, 0x07, 0xa0, 0xd4, 0x19, 0x96, 0x44,
	0x9f, 0x15, 0x1d, 0xd1, 0x3f, 0x80, 0x96, 0x71, 0xd7, 0x17, 0xcc, 0xc8, 0xa9, 0x8a, 0xa7, 0x3c,
	0x77, 0x56, 0x1d, 0xbd, 0x7e, 0xc9, 0x73, 0xf4, 0x10, 0xb6, 0x30, 0x91, 0x8a, 0xb2, 0x44, 0x51,
	0xce, 0xe2, 0x94, 0x62, 0xe1, 0x5a, 0x6c, 0xb3, 0x84, 0x7f, 0x4a, 0xb1, 0x18, 0x08, 0xb8, 0x16,
	0x32, 0x45, 0xc4, 0x38, 0x49, 0x89, 0x39, 0xfe, 0x16, 0xf8, 0x72, 0x7e, 0xc4, 0x88, 0x3a, 0x3b,
	0xdd, 0xb3, 0x40, 0x88, 0xcb, 0xdd, 0x56, 0xaf, 0x74, 0x9b, 0x25, 0xac, 0xb1, 0x9e, 0xb0, 0x66,
	0x95, 0xb0, 0xc1, 0xaf, 0x0d, 0x08, 0x46, 0x5c, 0xa8, 0x4f, 0x28, 0xc3, 0x94, 0x4d, 0xd0, 0x1e,
	0x34, 0x75, 0x18, 0xf7, 0x12, 0xef, 0x5e, 0x4c, 0x9f, 0x76, 0x8a, 0x8c, 0xad, 0xce, 0x64, 0xca,
	0x65, 0x39, 0x13, 0xbd, 0x0c, 0x31, 0x7a, 0x03, 0xc1, 0x31, 0x1d, 0xc7, 0x98, 0xa8, 0x84, 0x66,
	0xb2, 0xd7, 0x30, 0x57, 0xf2, 0xc1, 0xe5, 0x31, 0x5d, 0x22, 0xc3, 0x37, 0x74, 0xfc, 0x99, 0xf5,
	0x7b, 0xce, 0x94, 0x58, 0x44, 0x70, 0xbc, 0x04, 0x34, 0xdd, 0x3a, 0xae, 0x5a, 0xe4, 0xc4, 0x15,
	0xd4, 0x39, 0xa6, 0xe3, 0xaf, 0x17, 0x39, 0xd1, 0xc5, 0x1e, 0x33, 0x9a, 0xda, 0x3d, 0xdb, 0x46,
	0x9e, 0x06, 0xcc, 0xe6, 0x97, 0xd0, 0xc9, 0x05, 0x1f, 0xd3, 0x8c, 0xf4, 0xda, 0x26, 0x97, 0xbd,
	0x77, 0xcb, 0x65, 0x64, 0x9d, 0x6c, 0x22, 0x45, 0x88, 0xfe, 0x21, 0x6c, 0xae, 0x24, 0x89, 0xb6,
	0xa0, 0xf1, 0x96, 0x2c, 0xdc, 0x55, 0xe9, 0xbf, 0xe8, 0x11, 0xb4, 0x8e, 0x93, 0x6c, 0x4e, 0xdc,
	0x1b, 0xbb, 0x31, 0xb4, 0xd2, 0x38, 0x2c, 0xa4, 0x71, 0xb8, 0xcf, 0x16, 0x91, 0x35, 0x79, 0x5a,
	0x7f, 0x52, 0xeb, 0x3f, 0x85, 0x6e, 0xf9, 0xb4, 0x35, 0x11, 0x6f, 0x94, 0x23, 0xfa, 0x25, 0xdf,
	0xc1, 0x4f, 0xcd, 0xb2, 0xb8, 0xee, 0x2b, 0x25, 0xe4, 0x39, 0xd1, 0x2b, 0x5e, 0x58, 0xbd, 0xf4,
	0xc2, 0xde, 0xed, 0xf5, 0x9e, 0x89, 0x49, 0xb3, 0x22, 0x26, 0x4f, 0xa1, 0x63, 0x7b, 0x52, 0xf6,
	0x5a, 0x86, 0xd4, 0xed, 0x8b, 0x49, 0x3d, 0x34, 0x86, 0x51, 0xe1, 0x70, 0xb5, 0xfa, 0x4d, 0x13,
	0x41, 0xec, 0x2b, 0xf7, 0x22, 0xb7, 0x42, 0xf7, 0xa1, 0x5b, 0x3c, 0x4a, 0x73, 0xcb, 0x56, 0x00,
	0x03, 0x87, 0x99, 0x8b, 0x7e, 0x08, 0x5b, 0xf9, 0x74, 0x21, 0x69, 0x9a, 0x64, 0x85, 0xb4, 0xf7,
	0x7c, 0xfb, 0xe8, 0x0a, 0xdc, 0x11, 0x85, 0xfe, 0x0f, 0x9b, 0x92, 0x4c, 0x66, 0x84, 0x29, 0xfb,
	0x40, 0x29, 0xee, 0x81, 0xb1, 0xdc, 0x28, 0xc3, 0x21, 0x46, 0x07, 0xe0, 0x39, 0x44, 0xf6, 0x02,
	0x53, 0xe8, 0x7b, 0x57, 0x7e, 0xa7, 0x8a, 0x6b, 0x18, 0x1e, 0x5a, 0xcf, 0x68, 0x19, 0xa2, 0xff,
	0x43, 0x0d, 0x3a, 0x0e, 0x5d, 0x9b, 0x6e, 0x6d, 0x7d, 0xba, 0xab, 0xc5, 0xd7, 0xcf, 0x17, 0xbf,
	0xa6, 0xa2, 0xc6, 0xba, 0x8a, 0x06, 0x3f, 0xd6, 0xc0, 0x3b, 0x24, 0xe9, 0x0b, 0xc1, 0xe7, 0xf9,
	0x3b, 0x35, 0x8a, 0x16, 0x70, 0x22, 0x53, 0x41, 0x73, 0x1d, 0xc1, 0x45, 0x2d, 0x43, 0xe8, 0x23,
	0x68, 0x89, 0x79, 0x46, 0x74, 0x8f, 0x5c, 0x21, 0xbf, 0xc5, 0xc1, 0xd1, 0x3c, 0x23, 0x91, 0x75,
	0xaa, 0xb6, 0x43, 0x6b, 0x45, 0xa9, 0x7e, 0xab, 0x43, 0xb7, 0xec, 0x74, 0x2e, 0xe3, 0xdb, 0xe0,
	0x63, 0x2a, 0x48, 0x6a, 0x72, 0xb3, 0x69, 0x9f, 0x01, 0x5a, 0xca, 0x89, 0x9a, 0x12, 0x61, 0x69,
	0xb3, 0xa9, 0xfb, 0x06, 0x31, 0xa4, 0x6d, 0x43, 0x57, 0x92, 0x34, 0x9e, 0xe8, 0xe8, 0x67, 0x3a,
	0x09, 0xd2, 0x1d, 0x18, 0x62, 0xfd, 0x4a, 0x8c, 0xde, 0x8a, 0x84, 0x4d, 0x48, 0x3c, 0xa3, 0xcc,
	0x64, 0xd8, 0x8a, 0xba, 0x1a, 0x8d, 0x34, 0x78, 0x40, 0xd9, 0xaa, 0x55, 0x72, 0x6a, 0xda, 0xba,
	0x62, 0x95, 0x9c, 0xea, 0xa9, 0xc5, 0x08, 0x40, 0xca, 0xb3, 0xe2, 0x13, 0x56, 0xac, 0xd1, 0x03,
	0xd8, 0x14, 0x64, 0xc6, 0x15, 0x39, 0x4b, 0xc6, 0x76, 0xf8, 0x35, 0x0b, 0x17, 0xf9, 0xec, 0xc0,
	0x96, 0xb3, 0xa3, 0x79, 0x9c, 0x0b, 0x32, 0xa6, 0xa7, 0xae, 0xc7, 0x37, 0x2c, 0x1e, 0xe6, 0x23,
	0x83, 0x56, 0x69, 0x85, 0x15, 0x5a, 0x7f, 0xaf, 0x41, 0xa7, 0x68, 0xae, 0x7f, 0x9e, 0x58, 0x0c,
	0xfe, 0x68, 0x42, 0x53, 0x4b, 0xf9, 0xb9, 0xda, 0xaa, 0x9f, 0xf6, 0xfa, 0xca, 0xa7, 0x7d, 0x59,
	0x7a, 0xe3, 0xd2, 0xd2, 0x9b, 0x97, 0x96, 0xde, 0xaa, 0x94, 0x7e, 0x0f, 0x82, 0x59, 0x92, 0xc6,
	0x09, 0xc6, 0x82, 0x48, 0xe9, 0x0a, 0x80, 0x59, 0x92, 0xee, 0x5b, 0x04, 0x3d, 0x03, 0xbf, 0x98,
	0x12, 0xf5, 0xc0, 0xd7, 0xb8, 0x7c, 0x12, 0xd6, 0x45, 0x0d, 0xc3, 0x51, 0xe4, 0xb9, 0x49, 0x72,
	0x85, 0x1f, 0x6f, 0x85, 0x9f, 0xfb, 0xd0, 0xc5, 0xe4, 0x98, 0xa6, 0x24, 0xe6, 0x27, 0x8c, 0x08,
	0xd7, 0x29, 0x81, 0xc5, 0x5e, 0x6b, 0xc8, 0xea, 0x46, 0x3a, 0x17, 0x54, 0x2d, 0x6c, 0xeb, 0xc9,
	0x1e, 0x6c, 0x37, 0xac, 0x6e, 0x58, 0xd8, 0xb4, 0x9e, 0x39, 0xc8, 0xc5, 0xa2, 0xb8, 0x17, 0xd8,
	0x83, 0x2c, 0x10, 0x62, 0xf4, 0x1d, 0xfc, 0x3b, 0xc9, 0x32, 0x7e, 0x42, 0x70, 0x51, 0x6a, 0x9c,
	0x27, 0x54, 0xc8, 0x5e, 0xd7, 0x54, 0xf4, 0xe8, 0x8a, 0x8a, 0x1c, 0x19, 0xa3, 0x84, 0x8a, 0xe8,
	0xba, 0x0b, 0x54, 0xc2, 0x64, 0xff, 0x63, 0xa8, 0x87, 0xa3, 0xcb, 0x27, 0xa3, 0x3b, 0x00, 0x34,
	0x5f, 0x12, 0xed, 0xae, 0x96, 0xe6, 0x2e, 0x4c, 0xff, 0x00, 0x82, 0x52, 0xc4, 0x15, 0xeb, 0xda,
	0x8a, 0xf5, 0xea, 0xb5, 0xd5, 0x57, 0xaf, 0x6d, 0xf0, 0x4b, 0x13, 0xda, 0xb6, 0x55, 0xff, 0x8e,
	0x1e, 0xbb, 0x0d, 0x3e, 0xcd, 0x8f, 0x89, 0x90, 0x5a, 0xc4, 0x9a, 0x46, 0x3a, 0xce, 0x00, 0xed,
	0x61, 0x06, 0x48, 0x37, 0x1f, 0xeb, 0xff, 0xfa, 0x90, 0xe5, 0x30, 0x9f, 0xbb, 0xb6, 0xf2, 0x8b,
	0xe1, 0x3c, 0xd7, 0x32, 0x81, 0x99, 0x8c, 0x75, 0xf0, 0x58, 0x12, 0xa1, 0x23, 0x99, 0xe6, 0xf2,
	0xa3, 0x0d, 0xcc, 0xe4, 0xab, 0x64, 0x46, 0x0e, 0x2d, 0x8a, 0xbe, 0x85, 0x2d, 0x4d, 0x78, 0x6a,
	0xbf, 0x1a, 0x39, 0xe7, 0x59, 0x31, 0x45, 0xef, 0x5e, 0xf5, 0x48, 0x87, 0xfb, 0x4b, 0xc7, 0x11,
	0xe7, 0x59, 0xb4, 0x99, 0x54, 0xd6, 0x12, 0x7d, 0x01, 0x81, 0x19, 0x11, 0xdd, 0x70, 0xee, 0x5f,
	0xd5, 0x0b, 0x2e, 0xec, 0x4b, 0x2e, 0x95, 0x1d, 0xd0, 0x61, 0x5a, 0xfc, 0x95, 0xe8, 0x2e, 0x00,
	0x61, 0xc9, 0x51, 0x46, 0xf0, 0x34, 0xcd, 0x8d, 0xa0, 0x79, 0x51, 0x09, 0xa9, 0x3e, 0x84, 0xa0,
	0xfa, 0x10, 0xfa, 0x5f, 0x81, 0xbf, 0x8c, 0xba, 0x76, 0x38, 0xaf, 0xad, 0x1d, 0xce, 0x2b, 0x23,
	0x7e, 0xbd, 0x32, 0xe2, 0xf7, 0x9f, 0xc0, 0x46, 0xb5, 0x7e, 0x3d, 0xa3, 0x49, 0x95, 0xb8, 0x31,
	0xda, 0x8f, 0xec, 0x42, 0xcf, 0x72, 0x84, 0x15, 0x7d, 0xa0, 0xff, 0x1e, 0xb5, 0x8d, 0xea, 0xbf,
	0xff, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x81, 0x5c, 0x45, 0x6c, 0x0f, 0x00, 0x00,
}
